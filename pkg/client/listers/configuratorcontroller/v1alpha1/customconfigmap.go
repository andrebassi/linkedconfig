// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/andrebassi/linkedconfig/pkg/apis/configuratorcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CustomConfigMapLister helps list CustomConfigMaps.
// All objects returned here must be treated as read-only.
type CustomConfigMapLister interface {
	// List lists all CustomConfigMaps in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomConfigMap, err error)
	// CustomConfigMaps returns an object that can list and get CustomConfigMaps.
	CustomConfigMaps(namespace string) CustomConfigMapNamespaceLister
	CustomConfigMapListerExpansion
}

// customConfigMapLister implements the CustomConfigMapLister interface.
type customConfigMapLister struct {
	indexer cache.Indexer
}

// NewCustomConfigMapLister returns a new CustomConfigMapLister.
func NewCustomConfigMapLister(indexer cache.Indexer) CustomConfigMapLister {
	return &customConfigMapLister{indexer: indexer}
}

// List lists all CustomConfigMaps in the indexer.
func (s *customConfigMapLister) List(selector labels.Selector) (ret []*v1alpha1.CustomConfigMap, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomConfigMap))
	})
	return ret, err
}

// CustomConfigMaps returns an object that can list and get CustomConfigMaps.
func (s *customConfigMapLister) CustomConfigMaps(namespace string) CustomConfigMapNamespaceLister {
	return customConfigMapNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CustomConfigMapNamespaceLister helps list and get CustomConfigMaps.
// All objects returned here must be treated as read-only.
type CustomConfigMapNamespaceLister interface {
	// List lists all CustomConfigMaps in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.CustomConfigMap, err error)
	// Get retrieves the CustomConfigMap from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.CustomConfigMap, error)
	CustomConfigMapNamespaceListerExpansion
}

// customConfigMapNamespaceLister implements the CustomConfigMapNamespaceLister
// interface.
type customConfigMapNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CustomConfigMaps in the indexer for a given namespace.
func (s customConfigMapNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CustomConfigMap, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CustomConfigMap))
	})
	return ret, err
}

// Get retrieves the CustomConfigMap from the indexer for a given namespace and name.
func (s customConfigMapNamespaceLister) Get(name string) (*v1alpha1.CustomConfigMap, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("customconfigmap"), name)
	}
	return obj.(*v1alpha1.CustomConfigMap), nil
}
